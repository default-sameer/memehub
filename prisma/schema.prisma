generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Meme{
  id            String    @id @default(cuid())
  imageUrl      String   
  nsfw          Boolean   @default(false)
  likes         Int?      @default(0)  
  author        User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String?
  like          Like[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
}

model Like{
  id            String    @id @default(cuid())
  memeId        String    @map(name: "meme_id")
  userId        String    @map(name: "user_id")
  user          User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  meme          Meme?     @relation(fields: [memeId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now()) @map(name: "created_at")

  @@unique([userId, memeId])

}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  bio           String?
  email         String?   @unique 
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  memes         Meme[]    
  like          Like[]
  accounts      Account[]
  sessions      Session[]
  
  @@map(name: "users")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String   @map(name: "user_id") 
  type               String
  provider           String
  providerAccountId  String   @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
  @@map("verificationtokens")
}